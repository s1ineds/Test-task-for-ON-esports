package structs

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ.
var messageObject *CurrentWeatherMessage = &CurrentWeatherMessage{}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π.
var forecastHours []*ForecastMessage

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–¥–µ—Ç –∏–≥—Ä–∞ –∏–ª–∏ –Ω–µ—Ç
var doGame bool = false

// –•–æ–¥—ã –±–æ—Ç–∞
var botMoves []string = []string{"ü™®", "‚úÇÔ∏è", "üßª"}

// –°—á–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞-–∏–≥—Ä–æ–∫–∞
var botPlayer int

// –°—á–µ—Ç –±–æ—Ç–∞
var humanPlayer int

// –ü–æ–¥—Å—á–µ—Ç —Ä–∞—É–Ω–¥–æ–≤. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∏.
var gameRounds int

type DBot struct{}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
func (d *DBot) getCoords(city string) (float64, float64) {
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –æ—Ç –ø–∞–Ω–∏–∫–∏, –≤–¥—Ä—É–≥ –ø–æ–≥–æ–¥–∞ –ø–ª–æ—Ö–∞—è.
	defer d.recoverFromPanic()

	var cityCoords []CityCoords

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API.
	resp, err := http.Get("https://api.openweathermap.org/geo/1.0/direct?q=" + city + "&limit=5&appid=0e8cf5b1fb682bd1754b07bfbbd7f038")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.
	respBody, readErr := io.ReadAll(resp.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ–±—ä–µ–∫—Ç CityCoords
	unmarhallErr := json.Unmarshal(respBody, &cityCoords)
	if unmarhallErr != nil {
		log.Fatal(unmarhallErr)
	}

	// –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
	messageObject.Name = cityCoords[0].Name
	messageObject.Country = cityCoords[0].Country
	messageObject.State = cityCoords[0].State

	return cityCoords[0].Lat, cityCoords[0].Lon
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
func (d *DBot) GetWeather(city string) {
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –æ—Ç –ø–∞–Ω–∏–∫–∏, –≤–¥—Ä—É–≥ –ø–æ–≥–æ–¥–∞ –ø–ª–æ—Ö–∞—è.
	defer d.recoverFromPanic()

	var curWeather CurrentWeather

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –®–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞.
	lat, lon := d.getCoords(city)

	// –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–∏–ø–∞ float64, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–∞ —Å—Ç—Ä–æ–∫–∞.
	latString := fmt.Sprintf("%f", lat)
	lonString := fmt.Sprintf("%f", lon)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å.
	resp, err := http.Get("https://api.openweathermap.org/data/2.5/weather?lat=" + latString + "&lon=" + lonString + "&appid=0e8cf5b1fb682bd1754b07bfbbd7f038&units=metric")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.
	respBytes, readBytesErr := io.ReadAll(resp.Body)
	if readBytesErr != nil {
		log.Fatal(readBytesErr)
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç CurrentWeather.
	unmarshallErr := json.Unmarshal(respBytes, &curWeather)
	if unmarshallErr != nil {
		log.Fatal(unmarshallErr)
	}

	// –°—Ä–∞–∑—É –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
	messageObject.WeatherDescription = curWeather.Weather[0].Description
	messageObject.Temperature = curWeather.Main.Temp
	messageObject.FeelsLike = curWeather.Main.FeelsLike
	messageObject.Pressure = curWeather.Main.Pressure
	messageObject.Humidity = curWeather.Main.Humidity
	messageObject.WindSpeed = curWeather.Wind.Speed
	messageObject.Sunrise = time.Unix(curWeather.Sys.Sunrise, 0).Format("2006-01-02 15:04:05")
	messageObject.Sunset = time.Unix(curWeather.Sys.Sunset, 0).Format("2006-01-02 15:04:05")
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π.
func (d *DBot) GetForecast(city string) {
	defer d.recoverFromPanic()

	var forecastObj WeatherForecast

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –®–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞.
	lat, lon := d.getCoords(city)

	// –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–∏–ø–∞ float64, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–∞ —Å—Ç—Ä–æ–∫–∞.
	latString := fmt.Sprintf("%f", lat)
	lonString := fmt.Sprintf("%f", lon)

	resp, err := http.Get("https://api.openweathermap.org/data/2.5/forecast?lat=" + latString + "&lon=" + lonString + "&appid=0e8cf5b1fb682bd1754b07bfbbd7f038&units=metric")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	respBytes, readErr := io.ReadAll(resp.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	unmarshallErr := json.Unmarshal(respBytes, &forecastObj)
	if unmarshallErr != nil {
		log.Fatal(unmarshallErr)
	}

	for _, obj := range forecastObj.Forecasts {
		forecastHours = append(forecastHours, &ForecastMessage{
			Date:        time.Unix(obj.DateTime, 0).Format("2006-01-02 15:04:05"),
			Description: obj.WeatherObj[0].Description,
			Temperature: obj.MainObj.Temp,
			FeelsLike:   obj.MainObj.FeelsLike,
			Pressure:    obj.MainObj.Pressure,
			Humidity:    obj.MainObj.Humidity,
			WindSpeed:   obj.WindObj.Speed,
		})
	}
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
func (d *DBot) SendWeatherMessage(s *discordgo.Session, m *discordgo.MessageCreate) {

	// –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
	if m.Author.ID == s.State.User.ID {
		return
	}

	// –ï—Å–ª–∏ –≤–≤–æ–¥–∏–º !help, —Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–∫—É.
	// –ó–¥–µ—Å—å —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ. –ï—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é,
	// —á—Ç–æ –≤–¥—Ä—É–≥ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –±–æ–ª—å—à–∏–º, —Ç–æ –ª—É—á—à–µ –ø—Ä–æ—á—Ç–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É–Ω—Ç–∏–Ω–µ.
	if strings.Contains(m.Content, "!help") {
		var msgChan chan string = make(chan string)

		go d.getHelp(msgChan)
		helpMessage := <-msgChan
		d.sendTextMessage(s, m.ChannelID, helpMessage)
	}

	// –ï—Å–ª–∏ –∫–æ–º–∞–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç !w, –∑–Ω–∞—á–∏—Ç –º—ã —Ö–æ—Ç–∏–º –ø–æ–≥–æ–¥—É.
	if strings.Contains(m.Content, "!w") {
		d.GetWeather(m.Content[2:])
		weatherMessage := d.generateWeatherMessage()
		d.sendEmbedMessage(s, m.ChannelID, weatherMessage)
	}

	// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç !f, –∑–Ω–∞—á–∏—Ç –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π.
	if strings.Contains(m.Content, "!f") {
		d.GetForecast(m.Content[2:])
		forecastMessages := d.generateForecastMessage()
		for _, msg := range forecastMessages {
			d.sendEmbedMessage(s, m.ChannelID, msg)
		}
	}
	// "‚úÇÔ∏è" "ü™®" "üßª"
	if strings.Contains(m.Content, "!gogame") || doGame {
		doGame = true
		d.rockPaperScissors(s, m)
	}
}

// –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞"
func (d *DBot) rockPaperScissors(s *discordgo.Session, m *discordgo.MessageCreate) {
	s.ChannelMessageSend(m.ChannelID, "Ready! Your move!")

	if m.Content != "" && m.Content != "!gogame" {
		gameRounds++

		botChoose := rand.Intn(len(botMoves) - 1)

		if m.Content == "ü™®" {
			bMove := botMoves[botChoose]
			s.ChannelMessageSend(m.ChannelID, bMove)
			switch bMove {
			case "üßª":
				botPlayer++
			case "‚úÇÔ∏è":
				humanPlayer++
			}
		}

		if m.Content == "‚úÇÔ∏è" {
			bMove := botMoves[botChoose]
			s.ChannelMessageSend(m.ChannelID, bMove)
			switch bMove {
			case "ü™®":
				botPlayer++
			case "üßª":
				humanPlayer++
			}
		}

		if m.Content == "üßª" {
			bMove := botMoves[botChoose]
			s.ChannelMessageSend(m.ChannelID, bMove)
			switch bMove {
			case "ü™®":
				humanPlayer++
			case "‚úÇÔ∏è":
				botPlayer++
			}
		}

		if gameRounds == 3 {
			if botPlayer == humanPlayer {
				s.ChannelMessageSend(m.ChannelID, "Nobody won.")
				msg := d.generateGameScoreMessage(botPlayer, humanPlayer)
				d.sendEmbedMessage(s, m.ChannelID, msg)
				gameRounds = 0
				doGame = false
				botPlayer = 0
				humanPlayer = 0
				return
			}
			if botPlayer > humanPlayer {
				s.ChannelMessageSend(m.ChannelID, "Bot Win!")
				msg := d.generateGameScoreMessage(botPlayer, humanPlayer)
				d.sendEmbedMessage(s, m.ChannelID, msg)
				gameRounds = 0
				doGame = false
				botPlayer = 0
				humanPlayer = 0
				return
			} else {
				s.ChannelMessageSend(m.ChannelID, "You Win!")
				msg := d.generateGameScoreMessage(botPlayer, humanPlayer)
				d.sendEmbedMessage(s, m.ChannelID, msg)
				gameRounds = 0
				doGame = false
				botPlayer = 0
				humanPlayer = 0
				return
			}
		}
	} else {
		return
	}
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (d *DBot) sendEmbedMessage(s *discordgo.Session, chanId string, message *discordgo.MessageEmbed) {
	_, err := s.ChannelMessageSendEmbed(chanId, message)
	if err != nil {
		log.Println(err)
	}
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (d *DBot) sendTextMessage(s *discordgo.Session, chanId, message string) {
	_, err := s.ChannelMessageSend(chanId, message)
	if err != nil {
		log.Println(err)
	}
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
func (d *DBot) generateWeatherMessage() *discordgo.MessageEmbed {

	embed := discordgo.MessageEmbed{
		Type:        discordgo.EmbedTypeRich,
		Title:       messageObject.Name,
		Description: messageObject.State,
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "Conditions",
				Value:  messageObject.WeatherDescription,
				Inline: true,
			},
			{
				Name:   "Temperature",
				Value:  fmt.Sprintf("%.0f", messageObject.Temperature),
				Inline: true,
			},
			{
				Name:   "Feels Like",
				Value:  fmt.Sprintf("%.0f", messageObject.FeelsLike),
				Inline: true,
			},
			{
				Name:   "Pressure",
				Value:  fmt.Sprintf("%d", messageObject.Pressure),
				Inline: true,
			},
			{
				Name:   "Humidity",
				Value:  fmt.Sprintf("%d", messageObject.Humidity),
				Inline: true,
			},
			{
				Name:   "WindSpeed",
				Value:  fmt.Sprintf("%.0f", messageObject.WindSpeed) + " m/s",
				Inline: true,
			},
			{
				Name:   "Sunrise",
				Value:  messageObject.Sunrise,
				Inline: true,
			},
			{
				Name:   "Sunset",
				Value:  messageObject.Sunset,
				Inline: true,
			},
		},
	}

	return &embed
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π.
func (d *DBot) generateForecastMessage() []*discordgo.MessageEmbed {
	var messageToSend []*discordgo.MessageEmbed

	for i := 1; i < len(forecastHours); i += 8 {
		messageToSend = append(messageToSend, &discordgo.MessageEmbed{
			Type:  discordgo.EmbedTypeRich,
			Title: forecastHours[i].Date,
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "Conditions",
					Value:  forecastHours[i].Description,
					Inline: true,
				},
				{
					Name:   "Temperature",
					Value:  fmt.Sprintf("%.0f", forecastHours[i].Temperature),
					Inline: true,
				},
				{
					Name:   "Feels Like",
					Value:  fmt.Sprintf("%.0f", forecastHours[i].FeelsLike),
					Inline: true,
				},
				{
					Name:   "Pressure",
					Value:  fmt.Sprintf("%d", forecastHours[i].Pressure),
					Inline: true,
				},
				{
					Name:   "Humidity",
					Value:  fmt.Sprintf("%d", forecastHours[i].Humidity),
					Inline: true,
				},
				{
					Name:   "WindSpeed",
					Value:  fmt.Sprintf("%.0f", forecastHours[i].WindSpeed) + " m/s",
					Inline: true,
				},
			},
		})
	}

	return messageToSend
}

func (d *DBot) generateGameScoreMessage(bot, human int) *discordgo.MessageEmbed {
	embed := discordgo.MessageEmbed{
		Type:  discordgo.EmbedTypeRich,
		Title: messageObject.Name,
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "Bot Player",
				Value:  fmt.Sprintf("%d", bot),
				Inline: true,
			},
			{
				Name:   "Human Player",
				Value:  fmt.Sprintf("%d", human),
				Inline: true,
			},
		},
	}

	return &embed
}

// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–ø—Ä–∞–≤–∫–∏.
// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –∫–∞–∫ –≥–æ—Ä—É—Ç–∏–Ω–∞.
func (d *DBot) getHelp(msgChan chan string) {
	file, err := os.OpenFile("help.txt", os.O_RDONLY, 0777)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	bytes, readErr := io.ReadAll(file)
	if readErr != nil {
		log.Fatal(readErr)
	}

	msgChan <- string(bytes)
}

// –ú–µ—Ç–æ–¥, –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –ø–∞–Ω–∏–∫–∏.
func (d *DBot) recoverFromPanic() {
	if r := recover(); r != nil {
		log.Println("RECOVERED! ", r)
	}
}
